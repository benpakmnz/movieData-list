{"version":3,"sources":["Utility/fontAwesome.js","Store/actions/actionTypes.js","Store/actions/fetchMovies.js","Components/MovieLayout/MovieButtons/MovieButtons.js","Components/MovieLayout/MovieLayout.js","validations.js","Components/Forms/EditMovieForm.js","Store/actions/formValidation.js","Components/UI/Backdrop/Backdrop.js","Components/UI/Modal/Modal.js","Components/MovieLayout/NewMovieLayout.js","Components/MoviesContainer/MoviesContainer.js","Components/Header/Header.js","App.js","Store/Reducers/fetchMovies.js","Store/Reducers/formValidation.js","serviceWorker.js","index.js","Utility/images/logo-moviesDataList.png"],"names":["library","add","faPlus","faCheck","faPen","faTrash","faCalendar","faTimes","faStopwatch","faImage","initMovies","moviesInitialList","dispatch","forEach","movieTitle","axios","get","concat","then","res","payload","data","type","Title","titleFormat","Poster","Year","Runtime","Genre","Director","imdbID","catch","error","console","log","title","regex","toLowerCase","split","filter","char","test","join","map","word","toUpperCase","slice","MovieButtons","props","react_default","a","createElement","className","onClick","clickedEdit","react_fontawesome_index_es","icon","clickedDelete","MovieLayout","onMouseEnter","this","handleMouseHover","onMouseLeave","style","backgroundImage","poster","year","runtime","genre","director","MovieLayout_MovieButtons_MovieButtons","formOpen","deleteMovie","Component","formValidator","currMovieList","errors","validator","isEmpty","isAlpha","blacklist","titleDuplicate","find","movie","undefined","some","titleCheck","isInt","EditMovieForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","preventDefault","movieData","current","value","selectedMovieData","onSubmitEditMovie","onSubmitNewMovie","onFormCancel","formValidation","validate","movieUpdatedData","JSON","stringify","moviesList","setState","stateEerrors","state","validateForm","keys","length","React","createRef","_this2","src","alt","label","defaultValue","ref","placeholder","connect","moviesDataList","Backdrop","closeModal","Modal","modalOpen","react","UI_Backdrop_Backdrop","modalClose","children","AddNewMovie","Container","formEditOpen","selectedFormType","formMode","selectedMovie","modalMode","modalType","formType","togglePopUp","clearFormErrors","FormCancel","onSubmitForm","deleteApprovel","movieToDelete","deleteApproved","setMovieList","Components_MovieLayout_MovieLayout","key","NewMovieLayout","UI_Modal_Modal","Forms_EditMovieForm","class","margin","actionCreators","movieId","Header","logo","App","Components_Header_Header","MoviesContainer_MoviesContainer","initialState","fetchMoviesReducer","arguments","action","objectSpread","toConsumableArray","formValidationReducer","Boolean","window","location","hostname","match","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4a75d411.chunk.js","sourcesContent":["\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { \r\n    faPlus,\r\n    faCheck,\r\n    faPen,\r\n    faTrash,\r\n    faCalendar,\r\n    faTimes,\r\n    faStopwatch,\r\n    faImage\r\n\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nlibrary.add(\r\n    faPlus,\r\n    faCheck,\r\n    faPen,\r\n    faTrash,\r\n    faCalendar,\r\n    faTimes,\r\n    faStopwatch,\r\n    faImage\r\n    \r\n);","export const FETCH_MOVIES = 'FETCH_MOVIES';\r\nexport const SET_MOVIE_LIST = 'SET_MOVIE_LIST';\r\nexport const EDIT_MOVIE_SUBMIT = 'EDIT_MOVIE_SUBMIT';\r\nexport const ADD_MOVIE_SUBMIT ='ADD_MOVIE_SUBMIT';\r\nexport const DELETE_MOVIE= 'DELETE_MOVIE';\r\nexport const FORM_ERROR ='FORM_ERROR';\r\nexport const CLEAR_FORM_ERROR= 'CLEAR_FORM_ERROR';","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const setMovieList = (payload) => {\r\n    const titleHandler = titleFormat(payload.Title)  \r\n    return {\r\n        type: actionTypes.SET_MOVIE_LIST,\r\n        payload: {\r\n            Title: titleHandler,\r\n            Poster: payload.Poster,\r\n            Year: payload.Year,\r\n            Runtime: payload.Runtime,\r\n            Genre: payload.Genre,\r\n            Director: payload.Director,\r\n            imdbID: payload.imdbID\r\n        } \r\n    }\r\n}\r\n\r\nexport const initMovies = () => {\r\n    let moviesInitialList = [\r\n            \"up\",\r\n            \"suits\",\r\n            \"casa+de+papel\",\r\n            \"friends\",\r\n            \"orange+is+the+new+black\",\r\n            \"prison+break\",\r\n            \"Breaking+Bad\",\r\n            \"young+sheldon\",\r\n            \"unreal\"\r\n            \r\n        ]\r\n\r\n        return dispatch => {\r\n        moviesInitialList.forEach(movieTitle => {\r\n            axios.get(`https://www.omdbapi.com/?t=${movieTitle}&apikey=8fb1ba1`)\r\n            .then(res => {\r\n                dispatch(setMovieList(res.data))           \r\n            })\r\n            .catch(error => console.log(error))\r\n        })\r\n\r\n    };\r\n};\r\n\r\n    export const titleFormat = (title) => {\r\n        if (!title) {\r\n            return;\r\n        } else {\r\n            let regex = /([a-z]|\\s)/i\r\n            let formattedTitle = title.toLowerCase()\r\n                                    .split('')\r\n                                    .filter(char => regex.test(char))\r\n                                    .join('')\r\n                                    .split(' ')\r\n                                    .map(word => word[0].toUpperCase() + word.slice(1)).join(' ')\r\n            return formattedTitle;\r\n        }\r\n    }\r\n\r\n\r\nexport const editMovieSubmit = (payload) => {\r\n    const titleHandler = titleFormat(payload.Title)\r\n    return{\r\n    type: actionTypes.EDIT_MOVIE_SUBMIT,\r\n    payload: {\r\n        Title: titleHandler,\r\n        Poster: payload.Poster,\r\n        Year: payload.Year,\r\n        Runtime: payload.Runtime,\r\n        Genre: payload.Genre,\r\n        Director: payload.Director,\r\n        imdbID: payload.imdbID\r\n    }\r\n    }\r\n};\r\n\r\n\r\nexport const addMovieSubmit = (payload) => {\r\n    const titleHandler = titleFormat(payload.Title)\r\n    return{\r\n        type: actionTypes.ADD_MOVIE_SUBMIT,\r\n        payload: {\r\n            Title: titleHandler,\r\n            Poster: payload.Poster,\r\n            Year: payload.Year,\r\n            Runtime: payload.Runtime,\r\n            Genre: payload.Genre,\r\n            Director: payload.Director,\r\n            imdbID: payload.imdbID\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteMovie = (payload) => {\r\n    return{\r\n        type: actionTypes.DELETE_MOVIE,\r\n        payload\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './MovieButtons.scss';\r\nimport '../MovieLayout.scss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst MovieButtons = (props) => (\r\n   <div className=\"movieButtonsContainer\">\r\n       <button className=\"blueMovieButton\" \r\n               onClick = {props.clickedEdit}>\r\n               <FontAwesomeIcon className=\"imageIcon\" icon=\"pen\"/>Edit\r\n               </button>\r\n       <button className=\"redMovieButton\" \r\n                onClick = {props.clickedDelete}>\r\n                <FontAwesomeIcon className=\"imageIcon\" icon=\"trash\"/>Delete\r\n                </button>\r\n   </div> \r\n)\r\n\r\n\r\nexport default MovieButtons;","import React, { Component } from 'react';\r\nimport './MovieLayout.scss';\r\nimport MovieButtons from './MovieButtons/MovieButtons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nclass MovieLayout extends Component {        \r\n\r\n    render() {\r\n        return(\r\n            <div className=\"movieLayout\" \r\n            onMouseEnter={this.handleMouseHover} \r\n            onMouseLeave={this.handleMouseHover}\r\n            >\r\n                <div className=\"posterContainer\" \r\n                style={{backgroundImage: `url(${this.props.poster})`}}>\r\n                {!this.props.poster ? <div className=\"noPoster\">\r\n                <FontAwesomeIcon className=\"imageIcons\" icon=\"image\"/></div> : null}\r\n                </div>\r\n                <div className=\"movieData\" >\r\n                    <div className=\"movieTitle\">{this.props.title}</div>\r\n                    <hr/>\r\n                    <p><FontAwesomeIcon className=\"dataIcon\" icon=\"calendar\"/><span>Year: </span> \r\n                    {this.props.year} | \r\n                       <FontAwesomeIcon className=\"dataIcon\" icon=\"stopwatch\"/><span>Runtime: </span> \r\n                    {this.props.runtime}</p>\r\n                    <p><span>Genre:</span>\r\n                    <br/>{this.props.genre}</p>\r\n                    <p><span>Director: </span>\r\n                    <br/>{this.props.director}</p>\r\n                </div>\r\n                <MovieButtons \r\n                    clickedEdit = {this.props.formOpen} \r\n                    clickedDelete = {this.props.deleteMovie}/>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default MovieLayout;","import validator from 'validator';\r\n\r\n\r\n// export const titleCheck = (data, currMovieList) => {\r\n//     let titleDuplicate = currMovieList.find(movie => movie.Title === data.Title)\r\n//         console.log(titleDuplicate)\r\n//         if(data.imdbID){\r\n//             if(titleDuplicate.imdbID !== data.imdbID){\r\n//                 return true\r\n//              }\r\n//         }else{ \r\n//             return false\r\n//         }\r\n// }\r\n\r\n\r\nexport const titleCheck = (data, currMovieList) => {\r\n      let titleDuplicate = currMovieList.find(movie => movie.imdbID === data.imdbID)\r\n        console.log(titleDuplicate)\r\n            if(titleDuplicate !== undefined){\r\n                if(titleDuplicate.Title === data.Title){\r\n                    console.log('edit')\r\n                    return true\r\n                }else{\r\n                    return false\r\n                }\r\n             }else if(currMovieList.some(movie => movie.Title === data.Title)){\r\n                return true\r\n             }\r\n                console.log(currMovieList)\r\n                console.log(data.Title)\r\n                console.log('new')\r\n               \r\n                  \r\n             \r\n}\r\n\r\n\r\nexport const formValidator = (data, currMovieList) =>{\r\n    let yearCheck = /(\\b(19|[2-9][0-9])\\d{2})$/;\r\n    let errors = {}\r\n\r\n    if(validator.isEmpty(data.Title)){\r\n        errors.Title = 'your Movie title is valuable'\r\n    }else if(!validator.isAlpha(validator.blacklist(data.Title, (', .')))) {\r\n        errors.Title = 'Title may contain only letters'\r\n    }else if(titleCheck(data, currMovieList)){\r\n        errors.Title = 'hiiii this movie is alreay here....'\r\n    }\r\n\r\n    if(validator.isEmpty(data.Year)){\r\n        errors.Year = 'your Movie year realesed is valuable'\r\n    }else if(!yearCheck.test(data.Year)){\r\n        errors.Year = 'movie year must be later then 1900'\r\n    }\r\n    \r\n    if(validator.isEmpty(data.Genre)){\r\n        errors.Genre = 'what about the movie genre ?'\r\n    }else if(!validator.isAlpha(validator.blacklist(data.Genre, (', ')))) {\r\n        errors.Genre = 'Genre may contain only letters'\r\n    }\r\n\r\n    if(validator.isEmpty(data.Runtime)){\r\n        errors.Runtime = 'what about the movie Runtime?'\r\n    }else if(!validator.isInt(data.Runtime)) {\r\n        errors.Runtime = 'the Runtime must be in minutes only'\r\n    }\r\n    \r\n    if(validator.isEmpty(data.Director)){\r\n        errors.Director = 'what about the Director ?'\r\n    }else if(!validator.isAlpha(validator.blacklist(data.Director, ('/ , .')))) {\r\n        errors.Director = 'Director name may contain letters only'\r\n    }\r\n\r\n\r\n    return errors;\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './MovieForm.scss';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../Store/actions/index';\r\nimport { formValidator } from '../../validations';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport '../MovieLayout/MovieLayout.scss';\r\n\r\nclass EditMovieForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            stateEerrors: {}\r\n        }\r\n\r\n        this.title = React.createRef()\r\n        this.year = React.createRef()\r\n        this.genre = React.createRef()\r\n        this.runtime = React.createRef()\r\n        this.director = React.createRef()\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault()\r\n        let movieData = {\r\n            Title: this.title.current.value,\r\n            Year: this.year.current.value,\r\n            Genre: this.genre.current.value,\r\n            Runtime: this.runtime.current.value,\r\n            Director: this.director.current.value,\r\n            imdbID: this.props.selectedMovieData.imdbID,\r\n            Poster: this.props.selectedMovieData.Poster\r\n            \r\n        }\r\n\r\n        if(this.props.selectedMovieData.imdbID){\r\n            this.props.onSubmitEditMovie(movieData)\r\n        }else{\r\n            this.props.onSubmitNewMovie(movieData)\r\n        }\r\n    \r\n        this.props.onFormCancel() \r\n    }\r\n\r\n\r\n    formValidation = (event, validate) => {\r\n        event.preventDefault()\r\n        if(!validate)\r\n        {this.onSubmit(event)\r\n           }else{\r\n                let movieUpdatedData = {\r\n                    Title: this.title.current.value,\r\n                    Year: this.year.current.value,\r\n                    Genre: this.genre.current.value,\r\n                    Runtime: this.runtime.current.value,\r\n                    Director: this.director.current.value,\r\n                    imdbID: this.props.selectedMovieData.imdbID\r\n                }\r\n                console.log('movieUpdatedData: '+ JSON.stringify(movieUpdatedData))\r\n\r\n                let errors = formValidator(movieUpdatedData, this.props.moviesList)\r\n                this.setState({\r\n                    stateEerrors: errors\r\n                })\r\n                console.log('stateErrors: ' + JSON.stringify(this.state.errors))\r\n                this.props.validateForm(errors)\r\n                if(Object.keys(errors).length === 0){\r\n                     this.onSubmit(event)\r\n                }\r\n            }\r\n        }  \r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className = \"formLayout\">\r\n                \r\n                {this.props.selectedMovieData.Poster ? \r\n                <img className=\"formPoster\" src={this.props.selectedMovieData.Poster} alt={this.props.selectedMovieData.Title}/> : \r\n                    <div className=\"formPoster\">\r\n                    <FontAwesomeIcon className=\"imageIcons\" icon=\"image\"/>\r\n                    </div>} \r\n                <form>\r\n                    <div>\r\n                        <p>* movie Title: \r\n                            <span>{this.props.errors.Title}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Title\" \r\n                            defaultValue = {this.props.selectedMovieData.Title} \r\n                            ref={this.title} \r\n                            placeholder=\"please type movie title\"\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <p>* Year Realsed:\r\n                             <span>{this.props.errors.Year}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Year\" \r\n                            defaultValue = {this.props.selectedMovieData.Year} \r\n                            ref={this.year} \r\n                            placeholder=\"Years in numbers\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>* Run Time:\r\n                            <span>{this.props.errors.Runtime}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"RunTime\" \r\n                            defaultValue = {this.props.selectedMovieData.Runtime} \r\n                            ref={this.runtime} \r\n                            placeholder=\"Runtime in numbers\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>* Genere:\r\n                             <span>{this.props.errors.Genre}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Genere\" \r\n                            defaultValue = {this.props.selectedMovieData.Genre} \r\n                            ref={this.genre} \r\n                            placeholder=\"movie genere\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>* Director:\r\n                        <span>{this.props.errors.Director}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Director\" \r\n                            defaultValue = {this.props.selectedMovieData.Director} \r\n                            ref={this.director} \r\n                            placeholder=\"name of the movie director\"/>\r\n                    <div className=\"formButtons\">\r\n                        <button onClick = {event => this.formValidation(event, true)}>\r\n                        <FontAwesomeIcon icon=\"check\"></FontAwesomeIcon> Submit changes\r\n                        </button>\r\n                        <p className =\"cancelButton\" \r\n                           onClick = {this.props.onFormCancel}>cancel</p>\r\n                    </div>\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n     moviesList: state.moviesList.moviesDataList,\r\n     errors: state.formValidation.errors\r\n    } \r\n }\r\n\r\n const mapDispatchToProps = dispatch => {\r\n     return {\r\n         validateForm: (data) => dispatch(actionCreators.formValidationErrors(data)),\r\n         onSubmitEditMovie: (movieData) => dispatch(actionCreators.editMovieSubmit(movieData)),\r\n         onSubmitNewMovie: (movieData) => dispatch(actionCreators.addMovieSubmit(movieData)),\r\n         \r\n        }\r\n }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditMovieForm);\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const formValidationErrors = (payload) => {\r\n    return {\r\n        type: actionTypes.FORM_ERROR,\r\n        payload\r\n        \r\n    }\r\n}\r\n\r\nexport const clearFormValidationErrors = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_FORM_ERROR\r\n        \r\n    }\r\n}","import React from 'react';\r\nimport './Backdrop.scss';\r\n\r\nconst Backdrop = props => {\r\n    return (\r\n        <div className = 'backdrop'\r\n            onClick = { () => props.closeModal() }>\r\n        </div>)\r\n}\r\n\r\nexport default Backdrop;","import React, { Fragment } from 'react';\r\nimport './Modal.scss';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Modal = props => {\r\n    return (\r\n        props.modalOpen ? \r\n        (<Fragment>\r\n            <Backdrop closeModal = { props.modalClose } > </Backdrop>\r\n            <div className = \"modal\">\r\n            <button className=\"modalCloseButton\" onClick={props.modalClose}><FontAwesomeIcon className=\"imageIcon\" icon=\"times\"/></button>\r\n                {props.children}\r\n            </div>\r\n        </Fragment>) : null\r\n    )\r\n}\r\n\r\nexport default Modal","import React from 'react';\r\nimport './MovieLayout.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nconst AddNewMovie = (props) => (\r\n <div className=\"addMovieLayout\" onClick={props.formOpen}> \r\n         <div className=\"posterContainer\">\r\n        <FontAwesomeIcon className=\"addMovieIcon\" icon=\"plus\"/>\r\n          </div>\r\n            <div className=\"newMovieTitle\">Add new movie</div>\r\n            <div className=\"NewMovieTitleMobile\">Add new movie</div>\r\n   </div>\r\n)\r\nexport default AddNewMovie\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../Store/actions/index';\r\n\r\nimport './MoviesContainer.scss';\r\nimport '../MovieLayout/MovieButtons/MovieButtons.scss';\r\nimport MovieLayout from '../MovieLayout/MovieLayout';\r\nimport EditMovieForm from '../Forms/EditMovieForm';\r\nimport Modal from '../UI/Modal/Modal';\r\nimport NewMovieLayout from '../MovieLayout/NewMovieLayout';\r\n\r\n\r\nclass Container extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            formMode: false,\r\n            selectedMovie: {},\r\n            modalMode: false,\r\n            modalType: '',\r\n            formType: '',\r\n            movieToDelete: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setMovieList()\r\n        console.log('componentDidMount: '+ JSON.stringify(this.state))\r\n    }\r\n\r\n    formEditOpen = (movie, selectedFormType) => {\r\n        this.setState({\r\n            formMode: !this.state.formMode,\r\n            selectedMovie: movie,\r\n            modalMode: !this.state.modalMode,\r\n            modalType: 'form',\r\n            formType: selectedFormType,\r\n        })\r\n        console.log(this.state)\r\n    }\r\n    \r\n    togglePopUp = () => {\r\n        this.setState({\r\n            formMode: !this.state.formMode,\r\n            modalMode: !this.state.modalMode,\r\n            modalType: ''\r\n        })\r\n        this.props.clearFormErrors()\r\n    }\r\n\r\n    FormCancel = () => {\r\n        this.setState({\r\n            formMode: !this.state.formMode,\r\n            modalMode: !this.state.modalMode,\r\n            modalType: ''\r\n        })\r\n        this.props.clearFormErrors()\r\n    }\r\n\r\n    onSubmitForm = (movieData) => {\r\n        this.props.onSubmit(movieData)\r\n        this.togglePopUp()\r\n        this.props.clearFormErrors()\r\n    }\r\n\r\n    deleteApprovel = (movie) => {\r\n        this.setState({\r\n            modalMode: !this.state.modalMode,\r\n            movieToDelete: movie,\r\n            modalType: 'delete'\r\n        }) \r\n    }\r\n\r\n    deleteApproved = () => {\r\n        this.setState({\r\n            modalMode: !this.state.modalMode,\r\n            modalType: ''\r\n        });\r\n        this.props.deleteMovie(this.state.movieToDelete.imdbID)\r\n    }\r\n\r\n          \r\n    render(){\r\n        // console.log(this.props.moviesList)\r\n        const moviesList = this.props.moviesList\r\n        .map(movie => <MovieLayout \r\n                    key={movie.imdbID ? movie.imdbID : movie.Title} \r\n                    title={movie.Title} \r\n                    poster={movie.Poster} \r\n                    year={movie.Year} \r\n                    runtime={movie.Runtime} \r\n                    genre={movie.Genre} \r\n                    director={movie.Director}\r\n                    formOpen={() => this.formEditOpen(movie, 'editForm')}\r\n                    deleteMovie= {() => this.deleteApprovel(movie)}\r\n                    />);  \r\n\r\n        return(\r\n            <div className=\"movieList\">\r\n                <NewMovieLayout formOpen={()=> this.formEditOpen({},'newForm')}/>\r\n                {moviesList}\r\n                <Modal modalOpen = {this.state.modalMode} modalClose= {this.togglePopUp}>\r\n\r\n                        {this.state.modalType === 'form' ? <EditMovieForm selectedMovieData = {this.state.selectedMovie} \r\n                        onFormCancel = {this.FormCancel}/> : null}\r\n                        {this.state.modalType === 'delete' ? \r\n                        <div class=\"deleteApprovalMessage\">\r\n                            <p>Are you sure you want to remove the title</p>\r\n                            <h3 style={{margin: '0px 0px 25px 0px'}}> {this.state.movieToDelete.Title} ?</h3>\r\n                            <div className=\"popUpFooter\">\r\n                            <button className=\"blueMovieButton\" onClick= {this.deleteApproved}>yep, please delete it for me</button>\r\n                            <button className=\"redMovieButton\"onClick={this.togglePopUp}>ooooops</button>\r\n                            </div>\r\n\r\n                        </div>\r\n                        : null}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n    const mapStateToProps = state => {\r\n        return {\r\n            moviesList: state.moviesList.moviesDataList,\r\n            \r\n        };\r\n    };\r\n\r\n    const mapDispatchToProps = dispatch => {\r\n        return{\r\n            setMovieList: () => dispatch(actionCreators.initMovies()),\r\n            deleteMovie: (movieId) => dispatch(actionCreators.deleteMovie(movieId)),\r\n            clearFormErrors: () => dispatch(actionCreators.clearFormValidationErrors())\r\n        }\r\n    };\r\n\r\n    export default connect(mapStateToProps, mapDispatchToProps)(Container);\r\n","import React from 'react';\r\nimport './Header.scss';\r\nimport logo from'../../Utility/images/logo-moviesDataList.png'\r\n\r\n\r\nconst Header = () => (\r\n    <header>\r\n        <img src = { logo } alt =\"logo\"/>\r\n    </header>\r\n)\r\n\r\n\r\n    export default Header","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport './Utility/fontAwesome';\nimport MoviesContainer from './Components/MoviesContainer/MoviesContainer';\nimport Header from './Components/Header/Header';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Header/>\n        <MoviesContainer></MoviesContainer>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    moviesDataList : [],\r\n};\r\n\r\n\r\nconst fetchMoviesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_MOVIE_LIST:\r\n            return ({\r\n                ...state,\r\n                moviesDataList: [action.payload, ...state.moviesDataList]\r\n            })\r\n        case actionTypes.EDIT_MOVIE_SUBMIT:\r\n            return {\r\n                ...state,\r\n                moviesDataList: state.moviesDataList.map(movie => {\r\n                    if (movie.imdbID === action.payload.imdbID){\r\n                        return action.payload\r\n                    }else{ \r\n                        return movie\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.ADD_MOVIE_SUBMIT:\r\n            return {\r\n                ...state,\r\n                moviesDataList: [action.payload, ...state.moviesDataList]\r\n\r\n            }\r\n        case actionTypes.DELETE_MOVIE:\r\n            return {\r\n                ...state,\r\n                moviesDataList: state.moviesDataList.filter(movie => {\r\n                return movie.imdbID !== action.payload\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n        };\r\n};\r\n\r\n\r\nexport default fetchMoviesReducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    errors: {\r\n        Title: '',\r\n        Year: '',\r\n        Genre: '',\r\n        Runtime: '',\r\n        Director: '',\r\n       \r\n    }\r\n};\r\n\r\nconst formValidationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FORM_ERROR:\r\n            return {\r\n                ...state,\r\n                errors: action.payload\r\n            }\r\n        case actionTypes.CLEAR_FORM_ERROR:\r\n            return {\r\n                ...state,\r\n                errors: {}\r\n            }\r\n        default:\r\n        return state;\r\n        }\r\n    }\r\n\r\nexport default formValidationReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport './normalize.css';\nimport App from './App';\nimport fetchMoviesReducer from './Store/Reducers/fetchMovies'\nimport formValidationReducer from './Store/Reducers/formValidation'\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({\n    moviesList: fetchMoviesReducer,\n    formValidation: formValidationReducer\n})\n\nconst logger = store => {\n    return next => {\n        return action => {\n            const result = next(action);\n            return result;\n        }\n    }\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo-moviesDataList.1c8e1103.png\";"],"sourceRoot":""}