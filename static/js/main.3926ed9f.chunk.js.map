{"version":3,"sources":["Utility/fontAwesome.js","Store/actions/actionTypes.js","Store/actions/fetchMovies.js","Components/MovieLayout/MovieButtons/MovieButtons.js","Components/MovieLayout/MovieLayout.js","validations.js","Components/Forms/EditMovieForm.js","Store/actions/formValidation.js","Components/UI/Backdrop/Backdrop.js","Components/UI/Modal/Modal.js","Components/MovieLayout/NewMovieLayout.js","Components/MoviesContainer/MoviesContainer.js","App.js","Store/Reducers/fetchMovies.js","Store/Reducers/formValidation.js","serviceWorker.js","index.js"],"names":["library","add","faPlus","faCheck","faPen","faTrash","faCalendar","faTimes","faStopwatch","initMovies","moviesInitialList","dispatch","forEach","movieTitle","axios","get","concat","then","res","payload","data","type","Title","titleFormat","Poster","Year","Runtime","Genre","Director","imdbID","catch","error","console","log","title","regex","toLowerCase","split","filter","char","test","join","map","word","toUpperCase","slice","MovieButtons","props","react_default","a","createElement","className","style","display","displayMode","onClick","clickedEdit","clickedDelete","name","MovieLayout","handleMouseHover","_this","bind","Object","assertThisInitialized","state","isHovering","this","setState","toggleHoverState","onMouseEnter","onMouseLeave","backgroundImage","poster","react_fontawesome_index_es","icon","year","runtime","genre","director","MovieLayout_MovieButtons_MovieButtons","formOpen","deleteMovie","Component","formValidator","currMovieList","errors","validator","isEmpty","isAlpha","blacklist","some","movie","titleCheck","isInt","EditMovieForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","preventDefault","movieData","current","value","selectedMovieData","onSubmitEditMovie","onSubmitNewMovie","onFormCancel","formValidation","validate","movieUpdatedData","moviesList","validateForm","keys","length","React","createRef","_this2","src","alt","label","defaultValue","ref","placeholder","connect","moviesDataList","Backdrop","closeModal","Modal","modalOpen","react","UI_Backdrop_Backdrop","modalClose","children","AddNewMovie","Container","formEditOpen","movieId","modalMode","selectedMovie","modalType","togglePopUp","clearFormErrors","FormCancel","onSubmitForm","deleteApprovel","movieToDelete","deleteApproved","setMovieList","Components_MovieLayout_MovieLayout","key","NewMovieLayout","UI_Modal_Modal","Forms_EditMovieForm","actionCreators","App","MoviesContainer_MoviesContainer","initialState","fetchMoviesReducer","arguments","undefined","action","objectSpread","toConsumableArray","formValidationReducer","Boolean","window","location","hostname","match","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAcAA,IAAQC,IACJC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KCrBG,qBCmBMC,EAAa,WACtB,IAAIC,EAAoB,CAChB,KACA,QACA,gBACA,UACA,0BACA,eACA,eACA,gBACA,UAIJ,OAAO,SAAAC,GACPD,EAAkBE,QAAQ,SAAAC,GACtBC,IAAMC,IAAN,8BAAAC,OAAwCH,EAAxC,oBACCI,KAAK,SAAAC,GAjCU,IAACC,EAkCbR,GAlCaQ,EAkCSD,EAAIE,KAhC/B,CACHC,KDLsB,iBCMtBF,QAAS,CACLG,MAJaC,EAAYJ,EAAQG,OAKjCE,OAAQL,EAAQK,OAChBC,KAAMN,EAAQM,KACdC,QAASP,EAAQO,QACjBC,MAAOR,EAAQQ,MACfC,SAAUT,EAAQS,SAClBC,OAAQV,EAAQU,aAyBfC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,SAM3BR,EAAc,SAACW,GACpB,IAAIC,EAAQ,cAOZ,OANqBD,EAAME,cACFC,MAAM,IACNC,OAAO,SAAAC,GAAI,OAAIJ,EAAMK,KAAKD,KAC1BE,KAAK,IACLJ,MAAM,KACNK,IAAI,SAAAC,GAAI,OAAIA,EAAK,GAAGC,cAAgBD,EAAKE,MAAM,KAAIJ,KAAK,sBCzC1EK,eARM,SAACC,GAAD,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBC,MAAO,CAACC,QAASN,EAAMO,cAC1DN,EAAAC,EAAAC,cAAA,UAAQK,QAAWR,EAAMS,aAAzB,QACAR,EAAAC,EAAAC,cAAA,UAAQK,QAAWR,EAAMU,eAAzB,UACAT,EAAAC,EAAAC,cAAA,SAAIH,EAAMW,iBCwCFC,6MAxCXC,iBAAmBC,EAAKD,iBAAiBE,KAAtBC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAF,OACnBI,MAAQ,CACJC,YAAY,qFAIZC,KAAKC,SAASD,KAAKE,2DAGNJ,GACb,MAAO,CACLC,YAAaD,EAAMC,6CAKrB,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcmB,aAAcH,KAAKP,iBAAkBW,aAAcJ,KAAKP,kBACjFZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACPC,MAAO,CAACoB,gBAAe,OAAAxD,OAASmD,KAAKpB,MAAM0B,OAApB,QAE/BzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcgB,KAAKpB,MAAMb,OACxCc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAiBvB,UAAU,WAAWwB,KAAK,aAAY3B,EAAAC,EAAAC,cAAA,sBAA1D,IAA+EiB,KAAKpB,MAAM6B,KAA1F,KACG5B,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAiBvB,UAAU,WAAWwB,KAAK,cAAa3B,EAAAC,EAAAC,cAAA,yBAD3D,IACmFiB,KAAKpB,MAAM8B,SAC9F7B,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,sBACHF,EAAAC,EAAAC,cAAA,WAAMiB,KAAKpB,MAAM+B,OACjB9B,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,0BACHF,EAAAC,EAAAC,cAAA,WAAMiB,KAAKpB,MAAMgC,WAErB/B,EAAAC,EAAAC,cAAC8B,EAAD,CACIxB,YAAeW,KAAKpB,MAAMkC,SAC1BxB,cAAiBU,KAAKpB,MAAMmC,YAC5B5B,aAAca,KAAKF,MAAMC,WAAa,mBAnChCiB,qCCGbC,EAAgB,SAAChE,EAAMiE,GAChC,IACIC,EAAS,GAmCb,OAjCGC,IAAUC,QAAQpE,EAAKE,OACtBgE,EAAOhE,MAAQ,+BACTiE,IAAUE,QAAQF,IAAUG,UAAUtE,EAAKE,MAAQ,SAElB,IAdrB,SAACF,EAAMiE,GAC7B,GAAGA,EAAcM,KAAK,SAAAC,GAAK,OAAIA,EAAMtE,QAAUF,EAAKE,QAC9C,OAAO,EAYJuE,CAAWzE,EAAMiE,KACtBC,EAAOhE,MAAQ,uCAFfgE,EAAOhE,MAAQ,iCAKhBiE,IAAUC,QAAQpE,EAAKK,MACtB6D,EAAO7D,KAAO,uCAZF,4BAaIe,KAAKpB,EAAKK,QAC1B6D,EAAO7D,KAAO,sCAGf8D,IAAUC,QAAQpE,EAAKO,OACtB2D,EAAO3D,MAAQ,+BACT4D,IAAUE,QAAQF,IAAUG,UAAUtE,EAAKO,MAAQ,SACzD2D,EAAO3D,MAAQ,kCAGhB4D,IAAUC,QAAQpE,EAAKM,SACtB4D,EAAO5D,QAAU,gCACX6D,IAAUO,MAAM1E,EAAKM,WAC3B4D,EAAO5D,QAAU,uCAGlB6D,IAAUC,QAAQpE,EAAKQ,UACtB0D,EAAO1D,SAAW,4BACZ2D,IAAUE,QAAQF,IAAUG,UAAUtE,EAAKQ,SAAW,YAC5D0D,EAAO1D,SAAW,0CAIf0D,GCxCLS,cACF,SAAAA,EAAYhD,GAAO,IAAAc,EAAA,OAAAE,OAAAiC,EAAA,EAAAjC,CAAAI,KAAA4B,IACflC,EAAAE,OAAAkC,EAAA,EAAAlC,CAAAI,KAAAJ,OAAAmC,EAAA,EAAAnC,CAAAgC,GAAAI,KAAAhC,KAAMpB,KAQVqD,SAAW,SAACC,GACRA,EAAMC,iBACN,IAAIC,EAAY,CACZjF,MAAOuC,EAAK3B,MAAMsE,QAAQC,MAC1BhF,KAAMoC,EAAKe,KAAK4B,QAAQC,MACxB9E,MAAOkC,EAAKiB,MAAM0B,QAAQC,MAC1B/E,QAASmC,EAAKgB,QAAQ2B,QAAQC,MAC9B7E,SAAUiC,EAAKkB,SAASyB,QAAQC,MAChC5E,OAAQgC,EAAKd,MAAM2D,kBAAkB7E,OACrCL,OAAQqC,EAAKd,MAAM2D,kBAAkBlF,QAItCqC,EAAKd,MAAM2D,kBAAkB7E,OAC5BgC,EAAKd,MAAM4D,kBAAkBJ,GAE7B1C,EAAKd,MAAM6D,iBAAiBL,GAGhC1C,EAAKd,MAAM8D,gBA5BIhD,EAgCnBiD,eAAiB,SAACT,EAAOU,GAErB,GADAV,EAAMC,iBACFS,EAEI,CACA,IAAIC,EAAmB,CACnB1F,MAAOuC,EAAK3B,MAAMsE,QAAQC,MAC1BhF,KAAMoC,EAAKe,KAAK4B,QAAQC,MACxB9E,MAAOkC,EAAKiB,MAAM0B,QAAQC,MAC1B/E,QAASmC,EAAKgB,QAAQ2B,QAAQC,MAC9B7E,SAAUiC,EAAKkB,SAASyB,QAAQC,MAChC5E,OAAQgC,EAAKd,MAAM2D,kBAAkB7E,QAErCyD,EAASF,EAAc4B,EAAkBnD,EAAKd,MAAMkE,YACxDpD,EAAKd,MAAMmE,aAAa5B,GACqB,IAA1CvB,OAAOoD,KAAKtD,EAAKd,MAAMuC,QAAQ8B,QAC7BvD,EAAKuC,SAASC,QAb1BxC,EAAKuC,SAASC,IAjCfxC,EAAK3B,MAAQmF,IAAMC,YACnBzD,EAAKe,KAAOyC,IAAMC,YAClBzD,EAAKiB,MAAQuC,IAAMC,YACnBzD,EAAKgB,QAAUwC,IAAMC,YACrBzD,EAAKkB,SAAWsC,IAAMC,YANPzD,wEAuDX,IAAA0D,EAAApD,KACJ,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACbH,EAAAC,EAAAC,cAAA,OAAKsE,IAAKrD,KAAKpB,MAAM2D,kBAAkBlF,OAAQiG,IAAKtD,KAAKpB,MAAM2D,kBAAkBpF,QACjF0B,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BACIF,EAAAC,EAAAC,cAAA,YAAOiB,KAAKpB,MAAMuC,OAAOhE,QAE7B0B,EAAAC,EAAAC,cAAA,SACIwE,MAAQ,QACRC,aAAgBxD,KAAKpB,MAAM2D,kBAAkBpF,MAC7CsG,IAAKzD,KAAKjC,MACV2F,YAAY,6BAGpB7E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2BACKF,EAAAC,EAAAC,cAAA,YAAOiB,KAAKpB,MAAMuC,OAAO7D,OAE9BuB,EAAAC,EAAAC,cAAA,SACIwE,MAAQ,OACRC,aAAgBxD,KAAKpB,MAAM2D,kBAAkBjF,KAC7CmG,IAAKzD,KAAKS,KACViD,YAAY,sBAEpB7E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACIF,EAAAC,EAAAC,cAAA,YAAOiB,KAAKpB,MAAMuC,OAAO5D,UAE7BsB,EAAAC,EAAAC,cAAA,SACIwE,MAAQ,UACRC,aAAgBxD,KAAKpB,MAAM2D,kBAAkBhF,QAC7CkG,IAAKzD,KAAKU,QACVgD,YAAY,wBAEpB7E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBACKF,EAAAC,EAAAC,cAAA,YAAOiB,KAAKpB,MAAMuC,OAAO3D,QAE9BqB,EAAAC,EAAAC,cAAA,SACIwE,MAAQ,SACRC,aAAgBxD,KAAKpB,MAAM2D,kBAAkB/E,MAC7CiG,IAAKzD,KAAKW,MACV+C,YAAY,kBAEpB7E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,YAAOiB,KAAKpB,MAAMuC,OAAO1D,WAEzBoB,EAAAC,EAAAC,cAAA,SACIwE,MAAQ,WACRC,aAAgBxD,KAAKpB,MAAM2D,kBAAkB9E,SAC7CgG,IAAKzD,KAAKY,SACV8C,YAAY,gCAEpB7E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQK,QAAW,SAAA8C,GAAK,OAAIkB,EAAKT,eAAeT,GAAO,KAAvD,kBACArD,EAAAC,EAAAC,cAAA,UAAQK,QAAWY,KAAKpB,MAAM8D,cAA9B,oBAlHI1B,aA2Ib2C,cAhBS,SAAA7D,GACpB,MAAO,CACNgD,WAAYhD,EAAMgD,WAAWc,eAC7BzC,OAAQrB,EAAM6C,eAAexB,SAIN,SAAA3E,GACvB,MAAO,CACHuG,aAAc,SAAC9F,GAAD,OAAUT,ECvItB,CACHU,KNCiB,aMAjBF,QDqIsEC,KACrEuF,kBAAmB,SAACJ,GAAD,OAAe5F,EJ/EjC,CACNU,KD3D6B,oBC4D7BF,QAAS,CACLG,MAJiBC,GADOJ,EIiFmDoF,GJhFtCjF,OAKrCE,OAAQL,EAAQK,OAChBC,KAAMN,EAAQM,KACdC,QAASP,EAAQO,QACjBC,MAAOR,EAAQQ,MACfC,SAAUT,EAAQS,SAClBC,OAAQV,EAAQU,UAXO,IAACV,GIkFvByF,iBAAkB,SAACL,GAAD,OAAe5F,EJ/DhC,CACFU,KD3EuB,mBC4EvBF,QAAS,CACLG,MAJaC,GADMJ,EIiEkDoF,GJhEpCjF,OAKjCE,OAAQL,EAAQK,OAChBC,KAAMN,EAAQM,KACdC,QAASP,EAAQO,QACjBC,MAAOR,EAAQQ,MACfC,SAAUT,EAAQS,SAClBC,OAAQV,EAAQU,UAXE,IAACV,KIsEhB2G,CAA6C/B,GEvI7CiC,iBAPE,SAAAjF,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WACbI,QAAY,kBAAMR,EAAMkF,kBCUrBC,EAZD,SAAAnF,GACV,OACIA,EAAMoF,UACLnF,EAAAC,EAAAC,cAACkF,EAAA,SAAD,KACGpF,EAAAC,EAAAC,cAACmF,EAAD,CAAUJ,WAAelF,EAAMuF,YAA/B,KACAtF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACZJ,EAAMwF,WAEA,MCMRC,EAbK,SAACzF,GAAD,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcI,QAASR,EAAMkC,UACxCjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACdH,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAiBvB,UAAU,eAAewB,KAAK,UAEhD3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAAf,oBCANsF,cACF,SAAAA,EAAY1F,GAAM,IAAAc,EAAA,OAAAE,OAAAiC,EAAA,EAAAjC,CAAAI,KAAAsE,IACd5E,EAAAE,OAAAkC,EAAA,EAAAlC,CAAAI,KAAAJ,OAAAmC,EAAA,EAAAnC,CAAA0E,GAAAtC,KAAAhC,KAAMpB,KAgBV2F,aAAe,SAACC,GACZ9E,EAAKO,SAAS,CAEVwE,WAAY/E,EAAKI,MAAM2E,UACvBC,cAAeF,EACfG,UAAW,SAEf9G,QAAQC,IAAI,kBAAmB4B,EAAKI,MAAM4E,eAC1C7G,QAAQC,IAAI,YAAa0G,IAzBX9E,EA6BlBkF,YAAc,WACVlF,EAAKO,SAAS,CAEVwE,WAAY/E,EAAKI,MAAM2E,YAI3B/E,EAAKd,MAAMiG,mBApCGnF,EAuClBoF,WAAa,WACTpF,EAAKO,SAAS,CAEVwE,WAAY/E,EAAKI,MAAM2E,UACvBE,UAAW,KAEfjF,EAAKd,MAAMiG,mBA7CGnF,EAgDlBqF,aAAe,SAAC3C,GACZ1C,EAAKd,MAAMqD,SAASG,GACpB1C,EAAKkF,cACLlF,EAAKd,MAAMiG,mBAnDGnF,EAsDlBsF,eAAiB,SAACvD,GACd/B,EAAKO,SAAS,CACVwE,WAAY/E,EAAKI,MAAM2E,UACvBQ,cAAexD,EACfkD,UAAW,YA1DDjF,EA+DlBwF,eAAiB,WACbxF,EAAKO,SAAS,CACVwE,WAAY/E,EAAKI,MAAM2E,UACvBE,UAAW,KAEfjF,EAAKd,MAAMmC,YAAYrB,EAAKI,MAAMmF,cAAcvH,SAlEhDgC,EAAKI,MAAQ,CAET4E,cAAe,GACfD,WAAW,EACXE,UAAW,GACXM,cAAe,IAPLvF,mFAYdM,KAAKpB,MAAMuG,gDA2DP,IAAA/B,EAAApD,KACJnC,QAAQC,IAAIkC,KAAKpB,MAAMkE,YACvB,IAAMA,EAAa9C,KAAKpB,MAAMkE,WAC7BvE,IAAI,SAAAkD,GAAK,OAAI5C,EAAAC,EAAAC,cAACqG,EAAD,CACFC,IAAK5D,EAAM/D,OAAS+D,EAAM/D,OAAS+D,EAAMtE,MACzCY,MAAO0D,EAAMtE,MACbmD,OAAQmB,EAAMpE,OACdoD,KAAMgB,EAAMnE,KACZoD,QAASe,EAAMlE,QACfoD,MAAOc,EAAMjE,MACboD,SAAUa,EAAMhE,SAChBqD,SAAU,kBAAMsC,EAAKmB,aAAa9C,IAClCV,YAAc,kBAAMqC,EAAK4B,eAAevD,QAGpD,OACI5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACuG,EAAD,CAAgBxE,SAAUd,KAAKuE,eAC9BzB,EACDjE,EAAAC,EAAAC,cAACwG,EAAD,CAAOvB,UAAahE,KAAKF,MAAM2E,UAAWN,WAAanE,KAAK4E,aAE1B,SAAzB5E,KAAKF,MAAM6E,UAAuB9F,EAAAC,EAAAC,cAACyG,EAAD,CAAejD,kBAAqBvC,KAAKF,MAAM4E,cAClFhC,aAAgB1C,KAAK8E,aAAgB,KACX,WAAzB9E,KAAKF,MAAM6E,UACZ9F,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4CAAoCiB,KAAKF,MAAMmF,cAAc9H,MAA7D,MACA0B,EAAAC,EAAAC,cAAA,UAAQK,QAAUY,KAAKkF,gBAAvB,gCACArG,EAAAC,EAAAC,cAAA,UAAQK,QAASY,KAAK4E,aAAtB,YAEF,cArGF5D,aA2HL2C,cAfS,SAAA7D,GACpB,MAAO,CACHgD,WAAYhD,EAAMgD,WAAWc,iBAKV,SAAApH,GACvB,MAAM,CACF2I,aAAc,kBAAM3I,EAASiJ,MAC7B1E,YAAa,SAACyD,GAAD,OAAahI,ETrC5B,CACFU,KDzFmB,eC0FnBF,QSmCkEwH,KAC9DK,gBAAiB,kBAAMrI,EJvHxB,CACHU,KNNuB,wBUgIZyG,CAA6CW,GCtHjDoB,mLARX,OACE7G,EAAAC,EAAAC,cAACkF,EAAA,SAAD,KACEpF,EAAAC,EAAAC,cAAC4G,EAAD,cAJU3E,6BCJZ4E,EAAe,CACjBhC,eAAiB,IAyCNiC,EArCY,WAAkC,IAAjC/F,EAAiCgG,UAAA7C,OAAA,QAAA8C,IAAAD,UAAA,GAAAA,UAAA,GAAzBF,EAAcI,EAAWF,UAAA7C,OAAA,EAAA6C,UAAA,QAAAC,EACzD,OAAQC,EAAO9I,MACX,IZRsB,iBYSlB,OAAO0C,OAAAqG,EAAA,EAAArG,CAAA,GACAE,EADP,CAEI8D,eAAc,CAAGoC,EAAOhJ,SAAVH,OAAA+C,OAAAsG,EAAA,EAAAtG,CAAsBE,EAAM8D,mBAElD,IZZyB,oBYarB,OAAOhE,OAAAqG,EAAA,EAAArG,CAAA,GACAE,EADP,CAEI8D,eAAgB9D,EAAM8D,eAAerF,IAAI,SAAAkD,GACrC,OAAIA,EAAM/D,SAAWsI,EAAOhJ,QAAQU,OACzBsI,EAAOhJ,QAEPyE,MAIvB,IZtBuB,mBYuBnB,OAAO7B,OAAAqG,EAAA,EAAArG,CAAA,GACAE,EADP,CAEI8D,eAAc,CAAGoC,EAAOhJ,SAAVH,OAAA+C,OAAAsG,EAAA,EAAAtG,CAAsBE,EAAM8D,mBAGlD,IZ3BmB,eY4Bf,OAAOhE,OAAAqG,EAAA,EAAArG,CAAA,GACAE,EADP,CAEI8D,eAAgB9D,EAAM8D,eAAezF,OAAO,SAAAsD,GAC5C,OAAOA,EAAM/D,SAAWsI,EAAOhJ,YAGvC,QACI,OAAO8C,ICrCb8F,EAAe,CACjBzE,OAAQ,CACJhE,MAAO,GACPG,KAAM,GACNE,MAAO,GACPD,QAAS,GACTE,SAAU,KAsBH0I,EAjBe,WAAkC,IAAjCrG,EAAiCgG,UAAA7C,OAAA,QAAA8C,IAAAD,UAAA,GAAAA,UAAA,GAAzBF,EAAcI,EAAWF,UAAA7C,OAAA,EAAA6C,UAAA,QAAAC,EAC5D,OAAQC,EAAO9I,MACX,IbViB,aaWb,OAAO0C,OAAAqG,EAAA,EAAArG,CAAA,GACAE,EADP,CAEIqB,OAAQ6E,EAAOhJ,UAEvB,IbduB,mBaenB,OAAO4C,OAAAqG,EAAA,EAAArG,CAAA,GACAE,EADP,CAEIqB,OAAQ,KAEhB,QACA,OAAOrB,ICdKsG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLN,IAAMC,EAAcC,YAAgB,CAChC5D,WAAY+C,EACZlD,eAAgBwD,IAYdQ,EAAmBN,OAAOO,sCAAwCC,IAElEC,EAAQC,YAAYN,EAAaE,EAAiBK,YAXzC,SAAAF,GACX,OAAO,SAAAG,GACH,OAAO,SAAAjB,GAEH,OADeiB,EAAKjB,MAQgDkB,OAEhFC,IAASC,OAAOvI,EAAAC,EAAAC,cAACsI,EAAA,EAAD,CAAUP,MAAOA,GAAOjI,EAAAC,EAAAC,cAACuI,EAAD,OAAmBC,SAASC,eAAe,SDkG7E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7K,KAAK,SAAA8K,GACjCA,EAAaC","file":"static/js/main.3926ed9f.chunk.js","sourcesContent":["\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { \r\n    faPlus,\r\n    faCheck,\r\n    faPen,\r\n    faTrash,\r\n    faCalendar,\r\n    faTimes,\r\n    faStopwatch\r\n\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nlibrary.add(\r\n    faPlus,\r\n    faCheck,\r\n    faPen,\r\n    faTrash,\r\n    faCalendar,\r\n    faTimes,\r\n    faStopwatch\r\n    \r\n);","export const FETCH_MOVIES = 'FETCH_MOVIES';\r\nexport const SET_MOVIE_LIST = 'SET_MOVIE_LIST';\r\nexport const EDIT_MOVIE_SUBMIT = 'EDIT_MOVIE_SUBMIT';\r\nexport const ADD_MOVIE_SUBMIT ='ADD_MOVIE_SUBMIT';\r\nexport const DELETE_MOVIE= 'DELETE_MOVIE';\r\nexport const FORM_ERROR ='FORM_ERROR';\r\nexport const CLEAR_FORM_ERROR= 'CLEAR_FORM_ERROR';","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const setMovieList = (payload) => {\r\n    const titleHandler = titleFormat(payload.Title)  \r\n    return {\r\n        type: actionTypes.SET_MOVIE_LIST,\r\n        payload: {\r\n            Title: titleHandler,\r\n            Poster: payload.Poster,\r\n            Year: payload.Year,\r\n            Runtime: payload.Runtime,\r\n            Genre: payload.Genre,\r\n            Director: payload.Director,\r\n            imdbID: payload.imdbID\r\n        } \r\n    }\r\n}\r\n\r\nexport const initMovies = () => {\r\n    let moviesInitialList = [\r\n            \"up\",\r\n            \"suits\",\r\n            \"casa+de+papel\",\r\n            \"friends\",\r\n            \"orange+is+the+new+black\",\r\n            \"prison+break\",\r\n            \"Breaking+Bad\",\r\n            \"young+sheldon\",\r\n            \"unreal\"\r\n            \r\n        ]\r\n\r\n        return dispatch => {\r\n        moviesInitialList.forEach(movieTitle => {\r\n            axios.get(`https://www.omdbapi.com/?t=${movieTitle}&apikey=8fb1ba1`)\r\n            .then(res => {\r\n                dispatch(setMovieList(res.data))           \r\n            })\r\n            .catch(error => console.log(error))\r\n        })\r\n\r\n    };\r\n};\r\n\r\nexport const titleFormat = (title) => {\r\n        let regex = /([a-z]|\\s)/i\r\n        let formattedTitle = title.toLowerCase()\r\n                                .split('')\r\n                                .filter(char => regex.test(char))\r\n                                .join('')\r\n                                .split(' ')\r\n                                .map(word => word[0].toUpperCase() + word.slice(1)).join(' ')\r\n        return formattedTitle;\r\n    \r\n}\r\n\r\n\r\nexport const editMovieSubmit = (payload) => {\r\n    const titleHandler = titleFormat(payload.Title)\r\n    return{\r\n    type: actionTypes.EDIT_MOVIE_SUBMIT,\r\n    payload: {\r\n        Title: titleHandler,\r\n        Poster: payload.Poster,\r\n        Year: payload.Year,\r\n        Runtime: payload.Runtime,\r\n        Genre: payload.Genre,\r\n        Director: payload.Director,\r\n        imdbID: payload.imdbID\r\n    }\r\n    }\r\n};\r\n\r\n\r\nexport const addMovieSubmit = (payload) => {\r\n    const titleHandler = titleFormat(payload.Title)\r\n    return{\r\n        type: actionTypes.ADD_MOVIE_SUBMIT,\r\n        payload: {\r\n            Title: titleHandler,\r\n            Poster: payload.Poster,\r\n            Year: payload.Year,\r\n            Runtime: payload.Runtime,\r\n            Genre: payload.Genre,\r\n            Director: payload.Director,\r\n            imdbID: payload.imdbID\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteMovie = (payload) => {\r\n    return{\r\n        type: actionTypes.DELETE_MOVIE,\r\n        payload\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './MovieButtons.scss';\r\n\r\nconst MovieButtons = (props) => (\r\n   <div className=\"movieButtonsContainer\" style={{display: props.displayMode}}>\r\n       <button onClick = {props.clickedEdit}>Edit</button>\r\n       <button onClick = {props.clickedDelete}>Delete</button>\r\n       <p>{props.name}</p>\r\n   </div> \r\n)\r\n\r\nexport default MovieButtons;","import React, { Component } from 'react';\r\nimport './MovieLayout.scss';\r\nimport MovieButtons from './MovieButtons/MovieButtons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nclass MovieLayout extends Component {\r\n    handleMouseHover = this.handleMouseHover.bind(this);\r\n    state = {\r\n        isHovering: false,\r\n    }\r\n\r\n    handleMouseHover() {\r\n        this.setState(this.toggleHoverState);\r\n      }\r\n    \r\n    toggleHoverState(state) {\r\n        return {\r\n          isHovering: !state.isHovering,\r\n        };\r\n      }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"movieLayout\" onMouseEnter={this.handleMouseHover} onMouseLeave={this.handleMouseHover}>\r\n                <div className=\"posterContainer\" \r\n                        style={{backgroundImage: `url(${this.props.poster})`}}>\r\n                </div>\r\n                <div className=\"movieData\">\r\n                    <div className=\"movieTitle\">{this.props.title}</div>\r\n                    <hr/>\r\n                    <p><FontAwesomeIcon className=\"dataIcon\" icon=\"calendar\"/><span>Year: </span> {this.props.year} | \r\n                       <FontAwesomeIcon className=\"dataIcon\" icon=\"stopwatch\"/><span>Runtime: </span> {this.props.runtime}</p>\r\n                    <p><span>Genre:</span>\r\n                    <br/>{this.props.genre}</p>\r\n                    <p><span>Director: </span>\r\n                    <br/>{this.props.director}</p>\r\n                </div>\r\n                <MovieButtons \r\n                    clickedEdit = {this.props.formOpen}\r\n                    clickedDelete = {this.props.deleteMovie}\r\n                    displayMode= {this.state.isHovering ? 'unset': 'unset'}/>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default MovieLayout;","import validator from 'validator';\r\n\r\n\r\nexport const titleCheck = (data, currMovieList) => {\r\n    if(currMovieList.some(movie => movie.Title === data.Title)){\r\n          return true\r\n    }\r\n}\r\n\r\nexport const formValidator = (data, currMovieList) =>{\r\n    let yearCheck = /(\\b(19|[2-9][0-9])\\d{2})$/;\r\n    let errors = {}\r\n\r\n    if(validator.isEmpty(data.Title)){\r\n        errors.Title = 'your Movie title is valuable'\r\n    }else if(!validator.isAlpha(validator.blacklist(data.Title, (', .')))) {\r\n        errors.Title = 'Title may contain only letters'\r\n    }else if(titleCheck(data, currMovieList)===true){\r\n        errors.Title = 'hiiii this movie is alreay here....'\r\n    }\r\n\r\n    if(validator.isEmpty(data.Year)){\r\n        errors.Year = 'your Movie year realesed is valuable'\r\n    }else if(!yearCheck.test(data.Year)){\r\n        errors.Year = 'movie year must be later then 1900'\r\n    }\r\n    \r\n    if(validator.isEmpty(data.Genre)){\r\n        errors.Genre = 'what about the movie genre ?'\r\n    }else if(!validator.isAlpha(validator.blacklist(data.Genre, (', ')))) {\r\n        errors.Genre = 'Genre may contain only letters'\r\n    }\r\n\r\n    if(validator.isEmpty(data.Runtime)){\r\n        errors.Runtime = 'what about the movie Runtime?'\r\n    }else if(!validator.isInt(data.Runtime)) {\r\n        errors.Runtime = 'the Runtime must be in minutes only'\r\n    }\r\n    \r\n    if(validator.isEmpty(data.Director)){\r\n        errors.Director = 'what about the Director ?'\r\n    }else if(!validator.isAlpha(validator.blacklist(data.Director, ('/ , .')))) {\r\n        errors.Director = 'Director name may contain letters only'\r\n    }\r\n\r\n\r\n    return errors;\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './MovieForm.scss';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../Store/actions/index';\r\nimport { formValidator } from '../../validations'\r\n\r\nclass EditMovieForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.title = React.createRef()\r\n        this.year = React.createRef()\r\n        this.genre = React.createRef()\r\n        this.runtime = React.createRef()\r\n        this.director = React.createRef()\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault()\r\n        let movieData = {\r\n            Title: this.title.current.value,\r\n            Year: this.year.current.value,\r\n            Genre: this.genre.current.value,\r\n            Runtime: this.runtime.current.value,\r\n            Director: this.director.current.value,\r\n            imdbID: this.props.selectedMovieData.imdbID,\r\n            Poster: this.props.selectedMovieData.Poster\r\n            \r\n        }\r\n\r\n        if(this.props.selectedMovieData.imdbID){\r\n            this.props.onSubmitEditMovie(movieData)\r\n        }else{\r\n            this.props.onSubmitNewMovie(movieData)\r\n        }\r\n    \r\n        this.props.onFormCancel() \r\n    }\r\n\r\n\r\n    formValidation = (event, validate) => {\r\n        event.preventDefault()\r\n        if(!validate)\r\n        {this.onSubmit(event)\r\n           }else{\r\n                let movieUpdatedData = {\r\n                    Title: this.title.current.value,\r\n                    Year: this.year.current.value,\r\n                    Genre: this.genre.current.value,\r\n                    Runtime: this.runtime.current.value,\r\n                    Director: this.director.current.value,\r\n                    imdbID: this.props.selectedMovieData.imdbID\r\n                }\r\n                let errors = formValidator(movieUpdatedData, this.props.moviesList)\r\n                this.props.validateForm(errors)\r\n                if(Object.keys(this.props.errors).length === 0){\r\n                     this.onSubmit(event)\r\n                }\r\n            }\r\n        }\r\n        \r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className = \"formLayout\">\r\n                <img src={this.props.selectedMovieData.Poster} alt={this.props.selectedMovieData.Title}/>\r\n                <form>\r\n                    <div>\r\n                        <p>* movie Title: \r\n                            <span>{this.props.errors.Title}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Title\" \r\n                            defaultValue = {this.props.selectedMovieData.Title} \r\n                            ref={this.title} \r\n                            placeholder=\"please type movie title\"\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <p>* Year Realsed:\r\n                             <span>{this.props.errors.Year}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Year\" \r\n                            defaultValue = {this.props.selectedMovieData.Year} \r\n                            ref={this.year} \r\n                            placeholder=\"Years in numbers\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>* Run Time:\r\n                            <span>{this.props.errors.Runtime}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"RunTime\" \r\n                            defaultValue = {this.props.selectedMovieData.Runtime} \r\n                            ref={this.runtime} \r\n                            placeholder=\"Runtime in numbers\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>* Genere:\r\n                             <span>{this.props.errors.Genre}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Genere\" \r\n                            defaultValue = {this.props.selectedMovieData.Genre} \r\n                            ref={this.genre} \r\n                            placeholder=\"movie genere\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>* Director:\r\n                        <span>{this.props.errors.Director}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Director\" \r\n                            defaultValue = {this.props.selectedMovieData.Director} \r\n                            ref={this.director} \r\n                            placeholder=\"name of the movie director\"/>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick = {event => this.formValidation(event, true)}>Submit changes</button>\r\n                        <button onClick = {this.props.onFormCancel}>cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n     moviesList: state.moviesList.moviesDataList,\r\n     errors: state.formValidation.errors\r\n    } \r\n }\r\n\r\n const mapDispatchToProps = dispatch => {\r\n     return {\r\n         validateForm: (data) => dispatch(actionCreators.formValidationErrors(data)),\r\n         onSubmitEditMovie: (movieData) => dispatch(actionCreators.editMovieSubmit(movieData)),\r\n         onSubmitNewMovie: (movieData) => dispatch(actionCreators.addMovieSubmit(movieData)),\r\n         \r\n        }\r\n }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditMovieForm);\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const formValidationErrors = (payload) => {\r\n    return {\r\n        type: actionTypes.FORM_ERROR,\r\n        payload\r\n        \r\n    }\r\n}\r\n\r\nexport const clearFormValidationErrors = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_FORM_ERROR\r\n        \r\n    }\r\n}","import React from 'react';\r\nimport './Backdrop.scss';\r\n\r\nconst Backdrop = props => {\r\n    return (\r\n        <div className = 'backdrop'\r\n            onClick = { () => props.closeModal() }>\r\n        </div>)\r\n}\r\n\r\nexport default Backdrop;","import React, { Fragment } from 'react'\r\nimport './Modal.scss'\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nconst Modal = props => {\r\n    return (\r\n        props.modalOpen ? \r\n        (<Fragment>\r\n            <Backdrop closeModal = { props.modalClose } > </Backdrop>\r\n            <div className = \"modal\">\r\n                {props.children}\r\n            </div>\r\n        </Fragment>) : null\r\n    )\r\n}\r\n\r\nexport default Modal","import React from 'react';\r\nimport './MovieLayout.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nconst AddNewMovie = (props) => (\r\n   <div className=\"movieLayout\" onClick={props.formOpen}>\r\n       <div className=\"posterContainer\">\r\n        <FontAwesomeIcon className=\"addMovieIcon\" icon=\"plus\"/>\r\n       </div>\r\n       <div className=\"movieData\">\r\n            <div className=\"movieTitle newMovieTitle\">Add new movie</div>\r\n       </div>\r\n   </div>\r\n)\r\n\r\n\r\n\r\nexport default AddNewMovie","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../Store/actions/index';\r\n\r\nimport './MoviesContainer.scss';\r\nimport MovieLayout from '../MovieLayout/MovieLayout';\r\nimport EditMovieForm from '../Forms/EditMovieForm';\r\nimport Modal from '../UI/Modal/Modal';\r\nimport NewMovieLayout from '../MovieLayout/NewMovieLayout';\r\n\r\n\r\nclass Container extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            // formMode: false,\r\n            selectedMovie: {},\r\n            modalMode: false,\r\n            modalType: '',\r\n            movieToDelete: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setMovieList()\r\n        // this.setState({modalType: ''})\r\n        \r\n    }\r\n\r\n    formEditOpen = (movieId) => {\r\n        this.setState({\r\n            // formMode: !this.state.formMode,\r\n            modalMode: !this.state.modalMode,\r\n            selectedMovie: movieId,\r\n            modalType: 'form'\r\n        })\r\n        console.log('selectedMovie: '+ this.state.selectedMovie)\r\n        console.log('movieId: '+ movieId)\r\n        \r\n    }\r\n\r\n    togglePopUp = () => {\r\n        this.setState({\r\n            // formMode: !this.state.formMode,\r\n            modalMode: !this.state.modalMode,\r\n\r\n            // modalType: 'form'\r\n        })\r\n        this.props.clearFormErrors()\r\n    }\r\n\r\n    FormCancel = () => {\r\n        this.setState({\r\n            // formMode: !this.state.formMode,\r\n            modalMode: !this.state.modalMode,\r\n            modalType: ''\r\n        })\r\n        this.props.clearFormErrors()\r\n    }\r\n\r\n    onSubmitForm = (movieData) => {\r\n        this.props.onSubmit(movieData)\r\n        this.togglePopUp()\r\n        this.props.clearFormErrors()\r\n    }\r\n\r\n    deleteApprovel = (movie) => {\r\n        this.setState({\r\n            modalMode: !this.state.modalMode,\r\n            movieToDelete: movie,\r\n            modalType: 'delete'\r\n        })\r\n        \r\n    }\r\n\r\n    deleteApproved = () => {\r\n        this.setState({\r\n            modalMode: !this.state.modalMode,\r\n            modalType: ''\r\n        });\r\n        this.props.deleteMovie(this.state.movieToDelete.imdbID)\r\n    }\r\n          \r\n    render(){\r\n        console.log(this.props.moviesList)\r\n        const moviesList = this.props.moviesList\r\n        .map(movie => <MovieLayout \r\n                    key={movie.imdbID ? movie.imdbID : movie.Title} \r\n                    title={movie.Title} \r\n                    poster={movie.Poster} \r\n                    year={movie.Year} \r\n                    runtime={movie.Runtime} \r\n                    genre={movie.Genre} \r\n                    director={movie.Director}\r\n                    formOpen={() => this.formEditOpen(movie)}\r\n                    deleteMovie= {() => this.deleteApprovel(movie)}\r\n                    />);  \r\n\r\n        return(\r\n            <div className=\"movieList\">\r\n                <NewMovieLayout formOpen={this.formEditOpen}/>\r\n                {moviesList}\r\n                <Modal modalOpen = {this.state.modalMode} modalClose= {this.togglePopUp}>\r\n\r\n                        {this.state.modalType === 'form' ? <EditMovieForm selectedMovieData = {this.state.selectedMovie} \r\n                        onFormCancel = {this.FormCancel}/> : null}\r\n                        {this.state.modalType === 'delete' ? \r\n                        <div>\r\n                            <p>Are you sure you want to delete {this.state.movieToDelete.Title} ?</p>\r\n                            <button onClick= {this.deleteApproved}>yep, please delete it for me</button>\r\n                            <button onClick={this.togglePopUp}>ooooops</button>\r\n                        </div>\r\n                        : null}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n    const mapStateToProps = state => {\r\n        return {\r\n            moviesList: state.moviesList.moviesDataList,\r\n            \r\n        };\r\n    };\r\n\r\n    const mapDispatchToProps = dispatch => {\r\n        return{\r\n            setMovieList: () => dispatch(actionCreators.initMovies()),\r\n            deleteMovie: (movieId) => dispatch(actionCreators.deleteMovie(movieId)),\r\n            clearFormErrors: () => dispatch(actionCreators.clearFormValidationErrors())\r\n        }\r\n    };\r\n\r\n    export default connect(mapStateToProps, mapDispatchToProps)(Container);\r\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport './Utility/fontAwesome';\nimport MoviesContainer from './Components/MoviesContainer/MoviesContainer';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <MoviesContainer></MoviesContainer>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    moviesDataList : [],\r\n};\r\n\r\n\r\nconst fetchMoviesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_MOVIE_LIST:\r\n            return ({\r\n                ...state,\r\n                moviesDataList: [action.payload, ...state.moviesDataList]\r\n            })\r\n        case actionTypes.EDIT_MOVIE_SUBMIT:\r\n            return {\r\n                ...state,\r\n                moviesDataList: state.moviesDataList.map(movie => {\r\n                    if (movie.imdbID === action.payload.imdbID){\r\n                        return action.payload\r\n                    }else{ \r\n                        return movie\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.ADD_MOVIE_SUBMIT:\r\n            return {\r\n                ...state,\r\n                moviesDataList: [action.payload, ...state.moviesDataList]\r\n\r\n            }\r\n        case actionTypes.DELETE_MOVIE:\r\n            return {\r\n                ...state,\r\n                moviesDataList: state.moviesDataList.filter(movie => {\r\n                return movie.imdbID !== action.payload\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n        };\r\n};\r\n\r\n\r\nexport default fetchMoviesReducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    errors: {\r\n        Title: '',\r\n        Year: '',\r\n        Genre: '',\r\n        Runtime: '',\r\n        Director: '',\r\n       \r\n    }\r\n};\r\n\r\nconst formValidationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FORM_ERROR:\r\n            return {\r\n                ...state,\r\n                errors: action.payload\r\n            }\r\n        case actionTypes.CLEAR_FORM_ERROR:\r\n            return {\r\n                ...state,\r\n                errors: {}\r\n            }\r\n        default:\r\n        return state;\r\n        }\r\n    }\r\n\r\nexport default formValidationReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport './normalize.css';\nimport App from './App';\nimport fetchMoviesReducer from './Store/Reducers/fetchMovies'\nimport formValidationReducer from './Store/Reducers/formValidation'\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({\n    moviesList: fetchMoviesReducer,\n    formValidation: formValidationReducer\n})\n\nconst logger = store => {\n    return next => {\n        return action => {\n            const result = next(action);\n            return result;\n        }\n    }\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}