{"version":3,"sources":["Components/MovieLayout/MovieButtons/MovieButtons.js","Components/MovieLayout/MovieLayout.js","validations.js","Components/Forms/EditMovieForm.js","Store/actions/formValidation.js","Store/actions/actionTypes.js","Components/UI/Backdrop/Backdrop.js","Components/UI/Modal/Modal.js","Components/MoviesContainer/MoviesContainer.js","Store/actions/fetchMovies.js","App.js","Store/Reducers/fetchMovies.js","Store/Reducers/formValidation.js","serviceWorker.js","index.js"],"names":["MovieButtons","props","react_default","a","createElement","className","style","display","displayMode","onClick","clickedEdit","clickedDelete","name","MovieLayout","handleMouseHover","_this","bind","Object","assertThisInitialized","state","isHovering","this","setState","toggleHoverState","onMouseEnter","onMouseLeave","backgroundImage","concat","poster","title","year","runtime","genre","director","MovieLayout_MovieButtons_MovieButtons","formOpen","deleteMovie","Component","formValidator","data","errors","validator","isEmpty","Title","isAlpha","blacklist","Year","Genre","Runtime","isInt","Director","EditMovieForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","preventDefault","movieData","current","value","imdbID","selectedMovieData","Poster","handleSubmit","onFormCancel","formValidation","validate","movieUpdatedData","validateForm","keys","length","React","createRef","_this2","src","alt","label","defaultValue","ref","placeholder","connect","moviesList","moviesDataList","dispatch","type","payload","Backdrop","closeModal","Modal","modalOpen","react","UI_Backdrop_Backdrop","modalClose","children","Container","formEditOpen","movieId","formMode","modalMode","selectedMovieId","togglePopUp","FormCancel","clearFormErrors","onSubmitForm","deleteApprovel","id","idToDelete","alertMessage","setMovieList","map","movie","Components_MovieLayout_MovieLayout","key","UI_Modal_Modal","Forms_EditMovieForm","moviesInitialList","forEach","movieTitle","axios","get","then","res","catch","error","console","log","actionCreators","App","MoviesContainer_MoviesContainer","initialState","fetchMoviesReducer","arguments","undefined","action","objectSpread","toConsumableArray","filter","formValidationReducer","Boolean","window","location","hostname","match","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0e792c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MovieButtons.scss';\r\n\r\nconst MovieButtons = (props) => (\r\n   <div className=\"movieButtonsContainer\" style={{display: props.displayMode}}>\r\n       <button onClick = {props.clickedEdit}>Edit</button>\r\n       <button onClick = {props.clickedDelete}>Delete</button>\r\n       <p>{props.name}</p>\r\n   </div> \r\n)\r\n\r\nexport default MovieButtons;","import React, { Component } from 'react';\r\nimport './MovieLayout.scss';\r\nimport MovieButtons from './MovieButtons/MovieButtons';\r\n\r\n\r\nclass MovieLayout extends Component {\r\n    handleMouseHover = this.handleMouseHover.bind(this);\r\n    state = {\r\n        isHovering: false,\r\n    }\r\n\r\n    handleMouseHover() {\r\n        this.setState(this.toggleHoverState);\r\n      }\r\n    \r\n    toggleHoverState(state) {\r\n        return {\r\n          isHovering: !state.isHovering,\r\n        };\r\n      }\r\n    \r\n    \r\n  \r\n  render() {\r\n        return(\r\n            <div className=\"movieLayout\" onMouseEnter={this.handleMouseHover} onMouseLeave={this.handleMouseHover}>\r\n                <div className=\"posterContainer\" \r\n                        style={{backgroundImage: `url(${this.props.poster})`}}>\r\n                </div>\r\n                <div className=\"movieData\">\r\n                    <div className=\"movieTitle\">{this.props.title}</div>\r\n                    <p><span>Year:</span> {this.props.year} | <span>Runtime: </span> {this.props.runtime}</p>\r\n                    <p><span>Genre:</span>\r\n                    <br/>{this.props.genre}</p>\r\n                    <p><span>Director: </span>\r\n                    <br/>{this.props.director}</p>\r\n                </div>\r\n                <MovieButtons \r\n                    clickedEdit = {this.props.formOpen}\r\n                    clickedDelete = {this.props.deleteMovie}\r\n                    displayMode= {this.state.isHovering ? 'unset': 'unset'}/>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default MovieLayout;","import validator from 'validator';\r\n\r\nexport const formValidator = (data) =>{\r\n    // let yearCheck = /(\\b(19|[2-9][0-9])\\d{2})$/;\r\n    let errors = {}\r\n    \r\n    if(validator.isEmpty(data.Title)){\r\n        errors.Title = 'your Movie title is valuable'\r\n    }else if(!validator.isAlpha(validator.blacklist(data.Title, (', .')))) {\r\n        errors.Title = 'Title may contain only letters'\r\n    }\r\n\r\n    if(validator.isEmpty(data.Year)){\r\n        errors.Year = 'your Movie year realesed is valuable'\r\n    // }else if(!yearCheck.test(data.Year)){\r\n    //     errors.Year = 'movie year must be later then 1900'\r\n    }\r\n    \r\n    if(validator.isEmpty(data.Genre)){\r\n        errors.Genre = 'what about the movie genre ?'\r\n    }else if(!validator.isAlpha(validator.blacklist(data.Genre, (', .')))) {\r\n        errors.Genre = 'Genre may contain only letters'\r\n    }\r\n\r\n    if(validator.isEmpty(data.Runtime)){\r\n        errors.Runtime = 'what about the movie Runtime?'\r\n    }else if(!validator.isInt(data.Runtime)) {\r\n        errors.Runtime = 'the Runtime must be in minutes only'\r\n    }\r\n    \r\n    if(validator.isEmpty(data.Director)){\r\n        errors.Director = 'what about the Director ?'\r\n    }else if(!validator.isAlpha(validator.blacklist(data.Director, (', .')))) {\r\n        errors.Director = 'Director name may contain letters only'\r\n    }\r\n    return errors\r\n}","import React, { Component } from 'react';\r\nimport './MovieForm.scss';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../Store/actions/index';\r\nimport { formValidator } from '../../validations'\r\n\r\nclass EditMovieForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.title = React.createRef()\r\n        this.year = React.createRef()\r\n        this.genre = React.createRef()\r\n        this.runtime = React.createRef()\r\n        this.director = React.createRef()\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault()\r\n        let movieData = {\r\n            Title: this.title.current.value,\r\n            Year: this.year.current.value,\r\n            Genre: this.genre.current.value,\r\n            Runtime: this.runtime.current.value,\r\n            Director: this.director.current.value,\r\n            imdbID: this.props.selectedMovieData.imdbID,\r\n            Poster: this.props.selectedMovieData.Poster\r\n            \r\n        }\r\n        this.props.handleSubmit(movieData)\r\n        this.props.onFormCancel() \r\n    }\r\n\r\n    formValidation = (event, validate) => {\r\n        event.preventDefault()\r\n        if(!validate)\r\n        {this.onSubmit(event)\r\n           }else{\r\n                let movieUpdatedData = {\r\n                    Title: this.title.current.value,\r\n                    Year: this.year.current.value,\r\n                    Genre: this.genre.current.value,\r\n                    Runtime: this.runtime.current.value,\r\n                    Director: this.director.current.value,\r\n                }\r\n                let errors = formValidator(movieUpdatedData)\r\n                this.props.validateForm(errors)\r\n                if(Object.keys(this.props.errors).length === 0 ) this.onSubmit(event)\r\n                }\r\n            }\r\n        \r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className = \"formLayout\">\r\n                <img src={this.props.selectedMovieData.Poster} alt={this.props.selectedMovieData.Title}/>\r\n                <form>\r\n                    <div>\r\n                        <p>* movie Title: \r\n                            <span>{this.props.errors.Title}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Title\" \r\n                            defaultValue = {this.props.selectedMovieData.Title} \r\n                            ref={this.title} \r\n                            placeholder=\"please type movie title\"\r\n                            />\r\n                    </div>\r\n                    <div>\r\n                        <p>* Year Realsed:\r\n                             <span>{this.props.errors.Year}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Year\" \r\n                            defaultValue = {this.props.selectedMovieData.Year} \r\n                            ref={this.year} \r\n                            placeholder=\"Years in numbers\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>* Run Time:\r\n                            <span>{this.props.errors.Runtime}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"RunTime\" \r\n                            defaultValue = {this.props.selectedMovieData.Runtime} \r\n                            ref={this.runtime} \r\n                            placeholder=\"Runtime in numbers\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>* Genere:\r\n                             <span>{this.props.errors.Genre}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Genere\" \r\n                            defaultValue = {this.props.selectedMovieData.Genre} \r\n                            ref={this.genre} \r\n                            placeholder=\"movie genere\"/>\r\n                    </div>\r\n                    <div>\r\n                        <p>* Director:\r\n                        <span>{this.props.errors.Director}</span>\r\n                        </p>\r\n                        <input \r\n                            label = \"Director\" \r\n                            defaultValue = {this.props.selectedMovieData.Director} \r\n                            ref={this.director} \r\n                            placeholder=\"name of the movie director\"/>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick = {event => this.formValidation(event, true)}>Submit changes</button>\r\n                        <button onClick = {this.props.onFormCancel}>cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n     moviesList: state.moviesList.moviesDataList,\r\n     errors: state.formValidation.errors\r\n    } \r\n }\r\n\r\n const mapDispatchToProps = dispatch => {\r\n     return {\r\n         validateForm: (data) => dispatch(actionCreators.formValidationErrors(data))\r\n     }\r\n }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditMovieForm);\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const formValidationErrors = (payload) => {\r\n    return {\r\n        type: actionTypes.FORMERROR,\r\n        payload\r\n        \r\n    }\r\n}\r\n\r\nexport const clearFormValidationErrors = () => {\r\n    return {\r\n        type: actionTypes.CLEARFORMERROR,\r\n        \r\n    }\r\n}","export const FETCHMOVIES = 'FETCHMOVIES';\r\nexport const SET_MOVIELIST = 'SET_MOVIELIST';\r\nexport const FORM_SUBMIT = 'FORM_SUBMIT';\r\nexport const DELETE_MOVIE= 'DELETE_MOVIE';\r\nexport const FORMERROR ='FORMERROR';\r\nexport const CLEARFORMERROR= 'CLEARFORMERROR';","import React from 'react';\r\nimport './Backdrop.scss';\r\n\r\nconst Backdrop = props => {\r\n    return (\r\n        <div className = 'backdrop'\r\n            onClick = { () => props.closeModal() }>\r\n        </div>)\r\n}\r\n\r\nexport default Backdrop;","import React, { Fragment } from 'react'\r\nimport './Modal.scss'\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nconst Modal = props => {\r\n    return (\r\n        props.modalOpen ? \r\n        (<Fragment>\r\n            <Backdrop closeModal = { props.modalClose } > </Backdrop>\r\n            <div className = \"modal\">\r\n                {props.children}\r\n            </div>\r\n        </Fragment>) : null\r\n    )\r\n}\r\n\r\nexport default Modal","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../Store/actions/index';\r\n\r\n\r\n\r\nimport './MoviesContainer.scss';\r\nimport MovieLayout from '../MovieLayout/MovieLayout';\r\nimport EditMovieForm from '../Forms/EditMovieForm';\r\nimport Modal from '../UI/Modal/Modal';\r\n\r\n\r\nclass Container extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            formMode: false,\r\n            selectedMovieId: '',\r\n            modalMode: false,\r\n            alertMessage: false,\r\n            // idToDelete: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setMovieList()\r\n    }\r\n\r\n    formEditOpen = (movieId) => {\r\n        this.setState({\r\n            formMode: !this.state.formMode,\r\n            modalMode: !this.state.modalMode,\r\n            selectedMovieId: movieId\r\n        })\r\n    }\r\n\r\n    togglePopUp = () => {\r\n        this.setState({\r\n            formMode: !this.state.formMode,\r\n            modalMode: !this.state.modalMode,\r\n        })\r\n    }\r\n\r\n    FormCancel = () => {\r\n        this.setState({\r\n            formMode: !this.state.formMode,\r\n            modalMode: !this.state.modalMode,\r\n        })\r\n        this.props.clearFormErrors()\r\n    }\r\n\r\n    onSubmitForm =(movieData) => {\r\n        this.props.onSubmit(movieData)\r\n        this.togglePopUp()\r\n\r\n    }\r\n\r\n    deleteApprovel = (id) => {\r\n        this.setState({\r\n            idToDelete: id,\r\n            modalMode: !this.modalMode,\r\n            alertMessage: !this.alertMessage\r\n        })\r\n\r\n    }\r\n\r\n    \r\n    \r\n    render(){\r\n        const moviesList = this.props.moviesList\r\n        .map(movie => <MovieLayout \r\n                    key={movie.imdbID} \r\n                    title={movie.Title} \r\n                    poster={movie.Poster} \r\n                    year={movie.Year} \r\n                    runtime={movie.Runtime} \r\n                    genre={movie.Genre} \r\n                    director={movie.Director}\r\n                    formOpen={() => this.formEditOpen(movie)}\r\n                    deleteMovie= {() => this.props.deleteMovie(movie.imdbID)}\r\n                    // deleteMovie= {() => this.deleteApprovel(movie.imdbID)}\r\n                    />);     \r\n\r\n        return(\r\n            <div className=\"movieList\">\r\n                <MovieLayout/>\r\n                {moviesList}\r\n                <Modal modalOpen = {this.state.modalMode} modalClose= {this.togglePopUp}>\r\n                        {this.state.formMode ? <EditMovieForm \r\n                        selectedMovieData = {this.state.selectedMovieId}\r\n                        onFormCancel = {this.FormCancel} \r\n                        handleSubmit = {this.onSubmitForm}/> : null}\r\n\r\n                        {/* {this.state.alertMessage ? \r\n                        <div>\r\n                        <p>Are you sure you want to delete this movie ?</p>\r\n                        <button onClick= {() => this.props.deleteMovie(this.state.idToDelete)}>yep, please delete it for me</button>\r\n                        <button onClick={this.togglePopUp}>ooooops</button>\r\n                        </div>\r\n                        : null} */}\r\n                </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n    const mapStateToProps = state => {\r\n        return {\r\n            moviesList: state.moviesList.moviesDataList,\r\n            \r\n        };\r\n    };\r\n\r\n    const mapDispatchToProps = dispatch => {\r\n        return{\r\n            setMovieList: () => dispatch(actionCreators.initMovies()),\r\n            onSubmit: (movieData) => dispatch(actionCreators.movieFormSubmit(movieData)),\r\n            deleteMovie: (movieId) => dispatch(actionCreators.deleteMovie(movieId)),\r\n            clearFormErrors: () => dispatch(actionCreators.clearFormValidationErrors())\r\n        }\r\n    };\r\n\r\n    export default connect(mapStateToProps, mapDispatchToProps)(Container);\r\n","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const setMovieList = (payload) => {\r\n    return {\r\n        type: actionTypes.SET_MOVIELIST,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const initMovies = () => {\r\n    let moviesInitialList = [\r\n            \"up\",\r\n            \"suits\",\r\n            \"casa+de+papel\",\r\n            \"friends\",\r\n            \"orange+is+the+new+black\",\r\n            \"prison+break\",\r\n            \"Breaking+Bad\",\r\n            \"young+sheldon\",\r\n            \"unreal\"\r\n        ]\r\n\r\n        return dispatch => {\r\n        moviesInitialList.forEach(movieTitle => {\r\n            axios.get(`http://www.omdbapi.com/?t=${movieTitle}&apikey=8fb1ba1`)\r\n            .then(res => {\r\n                dispatch(setMovieList(res.data))           \r\n            })\r\n            .catch(error => console.log(error))\r\n        })\r\n\r\n    };\r\n};\r\n\r\nexport const movieFormSubmit = (payload) => {\r\n    return{\r\n    type: actionTypes.FORM_SUBMIT,\r\n    payload\r\n    }\r\n};\r\n\r\nexport const deleteMovie = (payload) => {\r\n    return{\r\n        type: actionTypes.DELETE_MOVIE,\r\n        payload\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport MoviesContainer from './Components/MoviesContainer/MoviesContainer';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <MoviesContainer></MoviesContainer>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    moviesDataList : []\r\n};\r\n\r\n\r\nconst fetchMoviesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_MOVIELIST:\r\n            return {\r\n                ...state,\r\n                moviesDataList: [action.payload, ...state.moviesDataList]\r\n            }\r\n        case actionTypes.FORM_SUBMIT:\r\n            return {\r\n                ...state,\r\n                moviesDataList: state.moviesDataList.map(movie => {\r\n                    if (movie.imdbID === action.payload.imdbID){\r\n                        return action.payload\r\n                    }else{ \r\n                        return movie\r\n                    }\r\n                })\r\n            }\r\n        case actionTypes.DELETE_MOVIE:\r\n            return {\r\n                ...state,\r\n                moviesDataList: state.moviesDataList.filter(movie => {\r\n                    return movie.imdbID !== action.payload\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n        };\r\n};\r\n\r\n\r\nexport default fetchMoviesReducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    errors: {\r\n        Title: '',\r\n        Year: '',\r\n        Genre: '',\r\n        Runtime: '',\r\n        Director: '',\r\n       \r\n    }\r\n};\r\n\r\nconst formValidationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FORMERROR:\r\n            return {\r\n                ...state,\r\n                errors: action.payload\r\n            }\r\n        case actionTypes.CLEARFORMERROR:\r\n            return {\r\n                ...state,\r\n                errors: {\r\n                    Title: '',\r\n                    Year: '',\r\n                    Genre: '',\r\n                    Runtime: '',\r\n                    Director: '',\r\n                }\r\n            }\r\n        default:\r\n        return state;\r\n        }\r\n    }\r\n\r\nexport default formValidationReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport './normalize.css';\nimport App from './App';\nimport fetchMoviesReducer from './Store/Reducers/fetchMovies'\nimport formValidationReducer from './Store/Reducers/formValidation'\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({\n    moviesList: fetchMoviesReducer,\n    formValidation: formValidationReducer\n})\n\nconst logger = store => {\n    return next => {\n        return action => {\n            const result = next(action);\n            return result;\n        }\n    }\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}